/*
 * Tasmota Device Manager API
 *
 * Device manager for Tasmota devices via MQTT [Source](https://github.com/mbezuidenhout/tasmota.mqtt.device.manager).
 *
 * API version: 0.1.0
 * Contact: marius.bezuidenhout@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	mqtt "github.com/eclipse/paho.mqtt.golang"
	"github.com/mbezuidenhout/tasmota.mqtt.device.manager/v2"
	"github.com/thanhpk/randstr"
)

func MQTTConnectPost(w http.ResponseWriter, r *http.Request) {
	defer recoverError(w)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	var p MQTTOptions
	err := json.NewDecoder(r.Body).Decode(&p)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	mqttClientOptions := mqtt.NewClientOptions()
	mqttClientOptions.SetUsername(p.Username).SetPassword(p.Password).AddBroker(p.Host)
	clientID := randstr.Hex(4)
	mqttClientOptions.SetClientID("TMDM_" + clientID)

	apiKey := randstr.Hex(32)

	manager := tasmota.NewManager(*mqttClientOptions)
	manager.AddTopic(p.CustomTopic)
	manager.Connect()
	if manager == nil {
		w.WriteHeader(http.StatusUnauthorized)
	} else {
		managers[apiKey] = &ManagerWithTimes{
			Manager:    *manager,
			created:    time.Now(),
			lastUpdate: time.Now(),
		}
		fmt.Printf("Currently serving %d connection(s)", len(managers))
		w.WriteHeader(http.StatusOK)
		response := struct {
			APIKey string `json:"apikey"`
		}{
			APIKey: apiKey,
		}
		data, _ := json.Marshal(response)
		fmt.Fprintln(w, string(data))
	}
}

func MQTTDisconnectGet(w http.ResponseWriter, r *http.Request) {
	apiKey := r.Header.Get("X-Api-Key")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if managers[apiKey] == nil {
		w.WriteHeader(http.StatusUnauthorized)
	} else if !managers[apiKey].MQTTclient.IsConnected() {
		w.WriteHeader(http.StatusUnauthorized)
	} else {
		managers[apiKey].MQTTclient.Disconnect(1)
		w.WriteHeader(http.StatusOK)
	}
	delete(managers, apiKey)
}

func MQTTGet(w http.ResponseWriter, r *http.Request) {
	apiKey := r.Header.Get("X-Api-Key")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if managers[apiKey] == nil {
		w.WriteHeader(http.StatusUnauthorized)
	} else if !managers[apiKey].MQTTclient.IsConnected() {
		w.WriteHeader(http.StatusUnauthorized)
	} else {
		w.WriteHeader(http.StatusOK)
	}
}
