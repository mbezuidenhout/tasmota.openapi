/*
 * Sample API
 *
 * Device manager for Tasmota devices via MQTT [Source](https://github.com/mbezuidenhout/tdm).
 *
 * API version: 0.1.0
 * Contact: marius.bezuidenhout@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"fmt"
	"net/http"

	mqtt "github.com/eclipse/paho.mqtt.golang"
	"github.com/gorilla/mux"
	"github.com/mbezuidenhout/tasmota.mqtt.device.manager/v2"
)

type MQTTOptions struct {
	Host     string
	Username string
	Password string
}

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

var manager *tasmota.Manager

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}
	router.PathPrefix("/").Handler(http.FileServer(http.Dir("../dist/swaggerui")))

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

func SetMQTTOptions(w http.ResponseWriter, r *http.Request) {
	var p MQTTOptions
	err := json.NewDecoder(r.Body).Decode(&p)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	mqttClientOptions := mqtt.NewClientOptions()
	mqttClientOptions.SetUsername(p.Username).SetPassword(p.Password).AddBroker(p.Host)
	mqttClientOptions.SetClientID("TMDM_DEV")

	manager = tasmota.NewManager(*mqttClientOptions)
}

var routes = Routes{
	Route{
		Name:        "Index",
		Method:      "GET",
		Pattern:     "/v3/",
		HandlerFunc: Index,
	},

	Route{
		Name:        "mqtt",
		Method:      "POST",
		Pattern:     "/v3/mqtt",
		HandlerFunc: SetMQTTOptions,
	},

	Route{
		Name:        "DevicesGet",
		Method:      "GET",
		Pattern:     "/v3/devices",
		HandlerFunc: DevicesGet,
	},
}
